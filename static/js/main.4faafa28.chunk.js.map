{"version":3,"sources":["components/IndexCard.js","components/Corkboard.js","components/Login.js","components/Logout.js","App.js","reportWebVitals.js","index.js"],"names":["IndexCard","card","showCard","onDoubleClick","className","card_summary","Corkboard","currentStoryId","addSceneCallback","backToDesk","useState","cards","setCards","showNewCardModal","setShowNewCardModal","showChangeCardModal","setShowChangeCardModal","id","location","content_blocks","story","entity_key","currentCard","setCurrentCard","useEffect","getScenes","axios","get","then","response","data","catch","error","console","log","popOutCard","selectedCard","closeModal","cardComponents","map","i","parseInt","saveNewCard","sceneBreakId","Math","random","toString","substring","newCard","length","post","expandedCards","push","changeCardSummary","event","updatedCard","target","value","saveCardChanges","put","updatedCards","forEach","deleteCard","mod","trimmedCards","index","updated","moveCard","shuffleCards","splice","updateLocations","updateCard","onClick","Modal","show","onHide","animation","backdrop","centered","Body","Form","Group","Label","Control","as","onChange","Footer","Button","variant","Login","setUser","refreshTokenSetup","refreshTiming","tokenObj","expires_in","refreshToken","a","reloadAuthResponse","newAuthResponse","id_token","setTimeout","clientId","process","buttonText","onSuccess","profileObj","userData","getAuthResponse","email","first_name","givenName","last_name","familyName","onFailure","cookiePolicy","isSignedIn","render","renderProps","disabled","Logout","onLogoutSuccess","alert","App","EditorState","createEmpty","editorState","setEditorState","allStories","setAllStories","setCurrentStoryId","currentStoryTitle","setCurrentStoryTitle","showTitleModal","setShowTitleModal","amendedTitle","setAmendedTitle","inBoardView","setInBoardView","showNewTitleModal","setShowNewTitleModal","showNewSceneModal","setShowNewSceneModal","newSceneSummary","setNewSceneSummary","user","getStories","selectStory","title","getCurrentStory","loadWork","draft_raw","rawJson","destringed","JSON","parse","newContentState","convertFromRaw","newEditor","createWithContent","unselectStory","openNewTitle","closeNewTitle","newTitleInProgress","createNew","expandedStories","generateTitles","deleteWork","trimmedStories","delete","onEditorChange","saveWork","es","contentState","getCurrentContent","raw","convertToRaw","updatedWork","stringify","saveExistingWork","addSceneBlocks","newScene","currentContent","editorToUse","selection","getSelection","splitLine","createEntity","entityKey","getLastCreatedEntityKey","textWithEntity","Modifier","insertText","updatedEditorState","newLine","splitBlock","editorWithBreak","openNewScene","closeNewScene","newSceneInProgress","saveNewScene","chainSaveFunction","editorWithSceneBlocks","openTitleChange","closeTitleModal","titleChangeInProgress","saveTitleChange","storiesPlusUpdate","updatedStory","goToStoryBoard","goToWritingDesk","spellCheck","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"0XA+BeA,G,OA3BG,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SAMtB,OACI,qBAAKC,cALU,WACfD,EAASD,IAIuBG,UAAU,OAA1C,SACI,qBAAKA,UAAU,YAAf,SACI,4BAAIH,EAAKI,qBC4RVC,G,OA9RG,SAAC,GAAoD,IAAnDC,EAAkD,EAAlDA,eAA4BC,GAAsB,EAAlCC,WAAkC,EAAtBD,kBAAsB,EACxCE,mBAAS,IAD+B,mBAC3DC,EAD2D,KACpDC,EADoD,OAElBF,oBAAS,GAFS,mBAE3DG,EAF2D,KAEzCC,EAFyC,OAGZJ,oBAAS,GAHG,mBAG3DK,EAH2D,KAGtCC,EAHsC,OAI5BN,mBAAS,CAC3CO,GAAI,KACJZ,aAAc,GACda,SAAU,KACVC,eAAgB,GAChBC,MAAO,KACPC,WAAY,KAVkD,mBAI3DC,EAJ2D,KAI9CC,EAJ8C,KAclEC,qBAAU,WACNC,MACD,IAEH,IAAMA,EAAY,WACdC,IACKC,IADL,4BAC8BpB,IACzBqB,MAAK,SAAAC,GACFjB,EAASiB,EAASC,SAErBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMH,SAASC,UAI7CK,EAAa,SAAClC,GAChBgC,QAAQC,IAAI,cACZ,IAAME,EAAe,CACjBnB,GAAIhB,EAAKgB,GACTZ,aAAcJ,EAAKI,aACnBa,SAAUjB,EAAKiB,SACfC,eAAgBlB,EAAKkB,eACrBC,MAAOnB,EAAKmB,MACZC,WAAYpB,EAAKoB,YAErBE,EAAea,GACfpB,GAAuB,IAGrBqB,EAAa,WACfvB,GAAoB,GACpBE,GAAuB,GACvBO,EAAe,CACXN,GAAI,KACJZ,aAAc,GACda,SAAU,KACVC,eAAgB,GAChBC,MAAO,KACPC,WAAY,MAIdiB,EAAiB3B,EAAM4B,KAAI,SAACtC,EAAMuC,GAEpC,OADAvC,EAAKmB,MAAQqB,SAASxC,EAAKmB,OAEvB,cAAC,EAAD,CAEIlB,SAAUiC,EACVlC,KAAMA,GAFDA,EAAKgB,OAchByB,EAAc,WAChB,IAAMC,EAAeC,KAAKC,SAASC,SAAS,IAAIC,UAAU,EAAE,IAEtDC,EAAU,CACZ3C,aAAciB,EAAYjB,aAC1Ba,SAAUP,EAAMsC,OAChB7B,MAAOb,EACPc,WAAYsB,GAGhBjB,IACKwB,KAAK,eAAgBF,GACrBpB,MAAK,SAAAC,GAAQ,OAAII,QAAQC,IAAIL,EAASC,SACtCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMH,aAEtC,IAAMsB,EAAa,YAAOxC,GAC1BwC,EAAcC,KAAKJ,GACnBpC,EAASuC,GAETd,IACA7B,EAAiBwC,IAIfK,EAAoB,SAACC,GACvB,IAAMC,EAAc,CAChBtC,GAAIK,EAAYL,GAChBZ,aAAciD,EAAME,OAAOC,MAC3BvC,SAAUI,EAAYJ,SACtBC,eAAgBG,EAAYH,eAC5BC,MAAOb,EACPc,WAAYC,EAAYD,YAG5BE,EAAegC,IAIbG,EAAkB,WACpBhC,IACKiC,IADL,qBACuBrC,EAAYL,GADnC,KAC0CK,GACrCM,MAAK,SAAAC,GAAQ,OAAII,QAAQC,IAAIL,EAASC,SACtCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMH,SAASC,SAE/C,IAAM8B,EAAe,GACrBjD,EAAMkD,SAAQ,SAAC5D,GACPA,EAAKgB,KAAOK,EAAYL,GACxB2C,EAAaR,KAAK9B,GAElBsC,EAAaR,KAAKnD,MAG1BW,EAASgD,GACTvB,KAGEyB,EAAa,WACf,IAAIC,EAAM,EACJC,EAAe,GAErBrD,EAAMkD,SAAQ,SAAC5D,EAAMgE,GAGjB,GAAIhE,EAAKgB,KAAOK,EAAYL,GAAI,CAC5B,IAAMiD,EAAO,eAAOjE,GACpBiE,EAAQhD,SAAW+C,EAAQF,EAC3BC,EAAaZ,KAAKc,GAElBxC,IACCiC,IADD,qBACmBO,EAAQjD,GAD3B,KACkCiD,GACjCtC,MAAK,SAAAC,GAAQ,OAAII,QAAQC,IAAIL,EAASC,SACtCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMH,SAASC,cAG3CiC,IACArC,IACKiC,IADL,qBACuBrC,EAAYL,GADnC,gCAC8ChB,GAD9C,IACoDiB,SAAU,QACzDU,MAAK,SAAAC,GAAQ,OAAII,QAAQC,IAAIL,EAASC,SACtCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMH,SAASC,YAIvDlB,EAASoD,GACT3B,KAGE8B,EAAW,SAACJ,GAEd,GAAKzC,EAAYJ,SAAW6C,GAAOpD,EAAMsC,QAAY3B,EAAYJ,SAAW6C,EAAM,EAC9E1B,QADJ,CAMAqB,IAKA,IAAMU,EAAY,YAAOzD,GACzByD,EAAaC,OAAO/C,EAAYJ,SAAU,GAC1CkD,EAAaC,OAAO/C,EAAYJ,SAAW6C,EAAK,EAAGzC,GAInD,IAAMgD,EAAkBF,EAAa7B,KAAI,SAACtC,EAAMgE,GAC5C,IAAMM,EAAU,eAAOtE,GAQvB,OAPAsE,EAAWrD,SAAW+C,EAEtBvC,IACKiC,IADL,qBACuBY,EAAWtD,GADlC,KACyCsD,GACpC3C,MAAK,SAAAC,GAAQ,OAAII,QAAQC,IAAIL,EAASC,SACtCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMH,SAASC,SAExCyC,KAGX3D,EAAS0D,GAGT/C,EAAe,CACXN,GAAIK,EAAYL,GAChBZ,aAAciB,EAAYjB,aAC1Ba,SAAUI,EAAYJ,SAAW,EACjCC,eAAgBG,EAAYH,eAC5BC,MAAOE,EAAYF,MACnBC,WAAYC,EAAYD,eAqEhC,OACI,sBAAKjB,UAAU,kBAAf,UAGI,qBAAKA,UAAU,gFAAf,SACI,qBAAKA,UAAU,+DAAf,SAA+EkC,MAGnF,qBAAKlC,UAAU,sDAAf,SACI,wBAAQoE,QApNA,WAChB1D,GAAoB,IAmNkBV,UAAU,6BAAxC,4BAxCJ,eAACqE,EAAA,EAAD,CACIC,KAAM3D,EACN4D,OAAQtC,EACRuC,WAAW,EACXC,SAAS,SACTC,UAAU,EALd,UAOI,cAACL,EAAA,EAAMM,KAAP,UACI,cAACC,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,4BACA,cAACF,EAAA,EAAKG,QAAN,CACIC,GAAG,WACH3B,MAAOnC,EAAYjB,aACnBgF,SAAUhC,WAM1B,eAACoB,EAAA,EAAMa,OAAP,WACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYhB,QAASnC,EAArC,mBACA,cAACkD,EAAA,EAAD,CAAQC,QAAQ,UAAUhB,QAASd,EAAnC,0BAC0B,IAAzBpC,EAAYJ,SAAiB,KAAO,cAACqE,EAAA,EAAD,CAAQC,QAAQ,OAAOhB,QAAS,kBAAML,GAAU,IAAhD,gCACpC7C,EAAYJ,WAAaP,EAAMsC,OAAS,EAAI,KAAO,cAACsC,EAAA,EAAD,CAAQC,QAAQ,OAAOhB,QAAS,kBAAML,EAAS,IAA/C,8BACpD,cAACoB,EAAA,EAAD,CAAQC,QAAQ,SAAShB,QAASV,EAAlC,gCAxDR,eAACW,EAAA,EAAD,CACIC,KAAM7D,EACN8D,OAAQtC,EACRuC,WAAW,EACXC,SAAS,SACTC,UAAU,EALd,UAOI,cAACL,EAAA,EAAMM,KAAP,UACI,cAACC,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,oEACA,cAACF,EAAA,EAAKG,QAAN,CACIC,GAAG,WACH3B,MAAOnC,EAAYjB,aACnBgF,SAAUhC,WAM1B,eAACoB,EAAA,EAAMa,OAAP,WACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYhB,QAASnC,EAArC,mBACA,cAACkD,EAAA,EAAD,CAAQC,QAAQ,UAAUhB,QAAS9B,EAAnC,uC,QClLL+C,EAvDD,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAuBNC,EAAoB,SAAC9D,GACvB,IAAI+D,EAAkE,KAAjD/D,EAASgE,SAASC,YAAc,MAE/CC,EAAY,uCAAG,4BAAAC,EAAA,sEACanE,EAASoE,qBADtB,OACXC,EADW,OAEjBN,EAAgE,KAA/CM,EAAgBJ,YAAc,MAC/C7D,QAAQC,IAAI,mBAAoBgE,GAChCjE,QAAQC,IAAI,iBAAkBgE,EAAgBC,UAC9CC,WAAWL,EAAcH,GALR,2CAAH,qDAQlBQ,WAAWL,EAAcH,IAI7B,OACI,8BACI,cAAC,cAAD,CACIS,SA3CCC,2EA4CDC,WAAW,QACXC,UA1CM,SAAC3E,GACfI,QAAQC,IAAI,+BAAgCL,EAAS4E,YACrD,IAAMC,EAAW,CACbP,SAAUtE,EAAS8E,kBAAkBR,SACrCS,MAAO/E,EAAS4E,WAAWG,MAC3BC,WAAYhF,EAAS4E,WAAWK,UAChCC,UAAWlF,EAAS4E,WAAWO,YAEnCtF,IACKwB,KAAK,aAAcwD,GACnB9E,MAAK,SAACC,GACH6D,EAAQ7D,EAASC,SAEpBC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,EAAMH,aAExC8D,EAAkB9D,IA4BVoF,UAzBM,SAACpF,GACfI,QAAQC,IAAI,4BAA6BL,IAyBjCqF,aAAc,qBACdC,YAAY,EACZC,OAAQ,SAAAC,GAAW,OACf,wBAAQ7C,QAAS6C,EAAY7C,QAAS8C,SAAUD,EAAYC,SAAUlH,UAAU,gBAAhF,qCCvBLmH,EA1BA,SAAC,GAAe,IAAd7B,EAAa,EAAbA,QAWb,OACI,8BACI,cAAC,eAAD,CACIW,SAhBCC,2EAiBDC,WAAW,SACXiB,gBAfM,WACdC,MAAM,uBACN/B,EAAQ,CACJzE,GAAI,KACJ2F,MAAO,GACPC,WAAY,GACZE,UAAW,MAUPK,OAAQ,SAAAC,GAAW,OACf,wBAAQ7C,QAAS6C,EAAY7C,QAAS8C,SAAUD,EAAYC,SAAUlH,UAAU,gBAAhF,sBAEJA,UAAU,wC,OCmcXsH,MA9cf,WAAgB,IAAD,EACyBhH,oBACpC,kBAAMiH,cAAYC,iBAFP,mBACNC,EADM,KACOC,EADP,OAIuBpH,mBAAS,IAJhC,mBAINqH,EAJM,KAIMC,EAJN,OAK+BtH,mBAAS,MALxC,mBAKNH,EALM,KAKU0H,EALV,OAMqCvH,mBAAS,IAN9C,mBAMNwH,EANM,KAMaC,EANb,OAO+BzH,oBAAS,GAPxC,mBAON0H,EAPM,KAOUC,EAPV,OAQ2B3H,mBAAS,IARpC,mBAQN4H,EARM,KAQQC,EARR,OASyB7H,oBAAS,GATlC,mBASN8H,EATM,KASOC,EATP,OAWqC/H,oBAAS,GAX9C,mBAWNgI,EAXM,KAWaC,EAXb,OAYqCjI,oBAAS,GAZ9C,mBAYNkI,EAZM,KAYaC,EAZb,OAaiCnI,mBAAS,IAb1C,mBAaNoI,EAbM,KAaWC,GAbX,QAcWrI,mBAAS,CAC/BO,GAAI,KACJ2F,MAAO,GACPC,WAAY,GACZE,UAAW,KAlBA,qBAcNiC,GAdM,MAcAtD,GAdA,MA2BblE,qBAAU,WACRyH,OACC,CAACD,KAEJ,IAAMC,GAAa,WACbD,GAAK/H,IACPS,IACGC,IADH,6BAC6BqH,GAAK/H,KAC/BW,MAAK,SAAAC,GACJmG,EAAcnG,EAASC,SAExBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMH,cAqBlCqH,GAAc,SAAC5F,GACnB2E,EAAkB3E,EAAME,OAAOvC,IAC/BkH,EAAqB7E,EAAME,OAAO2F,OAClCC,GAAgB9F,EAAME,OAAOvC,KAGzBmI,GAAkB,SAAChI,GACvBM,IACCC,IADD,uBACqBP,IACpBQ,MAAK,SAAAC,GACJwH,GAASxH,EAASC,KAAKwH,cAExBvH,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EAAMH,UAClBoG,EAAkB,MAClBE,EAAqB,UAInBkB,GAAW,SAACE,GAChB,IAAMC,EAAaC,KAAKC,MAAMH,GACxBI,EAAkBC,yBAAeJ,GACjCK,EAAYlC,cAAYmC,kBAAkBH,GAChD7B,EAAe+B,IAKXE,GAAgB,WACpB9B,EAAkB,MAClBE,EAAqB,IACrBc,MAaIe,GAAe,WACnBrB,GAAqB,IAGjBsB,GAAgB,WACpBtB,GAAqB,IAGjBuB,GAAqB,SAAC5G,GAC1BiF,EAAgBjF,EAAME,OAAOC,QA4BzB0G,GAAY,WACK,KAAjB7B,GAKJ5G,IACGwB,KAAK,gBAAiB,CAACiG,MAAOb,EAAcgB,UAAW,+BAAoCN,KAAMA,GAAK/H,KACtGW,MAAK,SAAAC,GACJoG,EAAkBpG,EAASC,KAAKb,IAChCkH,EAAqBtG,EAASC,KAAKqH,OACnC,IAAMiB,EAAe,YAAOrC,GAC5BqC,EAAgBhH,KAAKvB,EAASC,MAC9BkG,EAAcoC,MAEfrI,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MAE9BiI,KACA1B,EAAgB,KAhBd0B,MAqBEI,GAAiBtC,EAAWxF,KAAI,SAACnB,EAAOoB,GAC5C,OAAO,wBAAQpC,UAAU,wBAAgCa,GAAIG,EAAMH,GAAIuD,QAAS0E,GAAaC,MAAO/H,EAAM+H,MAAnG,SACF/H,EAAM+H,OAD2C3G,MAgBlD8H,GAAa,WACjB,IAAMC,EAAiBxC,EAAWxF,KAAI,SAACnB,GACrC,GAAIA,EAAMH,KAAOV,EACf,OAAOa,KAGX4G,EAAcuC,GAEd7I,IACG8I,OADH,uBAC0BjK,EAD1B,MAEGqB,MAAK,SAAAC,GAAQ,OAAII,QAAQC,IAAIL,EAASC,SACtCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MAE9B+H,MAIIU,GAAiB,SAAC5C,GACtBC,EAAeD,IAKX6C,GAAW,SAACvB,EAAOwB,GACvB,IAAMC,EAAeD,EAAGE,oBAClBC,EAAMC,uBAAaH,GACnBI,EAAc,CAChB7B,MAAOA,EACPG,UAAWG,KAAKwB,UAAUH,GAC1B9B,KAAMA,GAAK/H,IAGfgB,QAAQC,IAAI,YACZR,IACKiC,IADL,uBACyBpD,EADzB,KAC4CyK,GACvCpJ,MAAK,SAAAC,GAAQ,OAAII,QAAQC,IAAIL,EAASC,SACtCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMH,cAGlCqJ,GAAmB,WACvBR,GAASxC,EAAmBL,IAKxBsD,GAAiB,SAACC,GACtBnJ,QAAQC,IAAI,kBAEZ,IAAImJ,EAAiBxD,EAAYgD,oBAC7BS,EAAczD,EACd0D,EAAYD,EAAYE,eAExBT,uBAAaM,GAAb,OAAuCpI,OAAS,IAElDoI,GADAC,EAAcG,MACeZ,oBAC7BU,EAAYD,EAAYE,gBAI1B,IAAM7I,EAAeyI,EAAS/J,WAC9BgK,EAAeK,aAAa,QAAS,YAAa/I,GAClD,IAAMgJ,EAAYN,EAAeO,0BAI3BC,EAAiBC,WAASC,WAAWV,EAAgBE,EADzC,MAC+D,KAAMI,GACjFK,EAAqBrE,cAAYvE,KAAKkI,EAAaO,EAAgB,qBAKzE,OAJA/D,EAAekE,GAGeP,GAAUO,IAKpCP,GAAY,WAAqB,IAApBd,EAAmB,uDAAhB9C,EAGdwD,EAAiBV,EAAGE,oBACpBU,EAAYZ,EAAGa,eACfS,EAAUH,WAASI,WAAWb,EAAgBE,GAC9CY,EAAkBxE,cAAYvE,KAAKuH,EAAIsB,EAAS,eAEtD,OADAnE,EAAeqE,GACRA,GAIHC,GAAe,WACnBrD,GAAmB,IACnBF,GAAqB,IAGjBwD,GAAgB,WACpBxD,GAAqB,IAGjByD,GAAqB,SAAChJ,GAC1ByF,GAAmBzF,EAAME,OAAOC,QAG5B8I,GAAe,WACnB,IAAM5J,EAAeC,KAAKC,SAASC,SAAS,IAAIC,UAAU,EAAE,IAEtDqI,EAAW,CACf/K,aAAcyI,EACd1H,MAAOb,EACPc,WAAYsB,GAGdjB,IACGwB,KAAK,eAAgBkI,GACrBxJ,MAAK,SAAAC,GAAQ,OAAII,QAAQC,IAAIL,EAASC,SACtCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMH,aAEpCwK,KACAG,GAAkBpB,IAGdoB,GAAiB,uCAAG,WAAMpB,GAAN,eAAApF,EAAA,sEACYmF,GAAeC,GAD3B,cAClBqB,EADkB,gBAEA/B,GAASxC,EAAmBuE,GAF5B,yDAAH,sDA4BjBC,GAAkB,WACtBrE,GAAkB,IAGdsE,GAAkB,WACtBtE,GAAkB,GAClBE,EAAgB,KAGZqE,GAAwB,SAACtJ,GAC7BiF,EAAgBjF,EAAME,OAAOC,QAKzBoJ,GAAkB,WACtBnC,GAASpC,EAAcT,GACvBM,EAAqBG,GACrB,IAAMwE,EAAoB/E,EAAWxF,KAAI,SAACnB,GACxC,GAAIA,EAAMH,IAAMV,EAAgB,CAC9B,IAAMwM,EAAY,eAAO3L,GAEzB,OADAA,EAAM+H,MAAQb,EACPyE,EAEP,OAAO3L,KAGX4G,EAAc8E,GACdH,MA6BIK,GAAiB,WAErB9B,KACAzC,GAAe,IAGXwE,GAAkB,WACtB7D,GAAgB7I,GAChBkI,GAAe,IAsDjB,OACE,gCACGlI,EAAiB,oBAAIH,UAAU,oBAAd,SAAmC8H,IAA0B,KAC/E,sBAAK9H,UAAU,8CAAf,UAEIG,EAvDFiI,EAEA,wBAAQpI,UAAU,gBAAgBoE,QAASyI,GAA3C,gCAIA,wBAAQ7M,UAAU,gBAAgBoE,QAASwI,GAA3C,+BAiDwC,KACvCzM,EApWH,8BACE,wBAAQH,UAAU,yCAAyCoE,QAASuF,GAApE,wCAmWkC,KACjCf,GAAKpC,MAAQ,cAAC,EAAD,CAAQlB,QAnZD,SAACsD,GAC1BtD,GAAQsD,GACRf,EAAkB,MAClBE,EAAqB,IACrBM,GAAe,GACfT,EAAc,OA8Y8C,cAAC,EAAD,CAAOtC,QAxZ3C,SAACsD,GACzBtD,GAAQsD,GACRC,WAyZG1I,EA5CGiI,EAEA,cAAC,EAAD,CAAWjI,eAAgBA,EAAgBE,WAAYwM,GAAiBzM,iBAAkBgM,KAI1F,sBAAKpM,UAAU,qBAAf,UAIE,qBAAKA,UAAU,sEAAf,SACE,cAAC,SAAD,CACEyH,YAAaA,EACbxC,SAAUoF,GACVyC,YAAY,MAMhB,sBAAK9M,UAAU,kEAAf,UACI,wBAAQoE,QAAS0G,GAAkB9K,UAAU,8BAA7C,kBAEA,wBAAQoE,QAAS4H,GAAchM,UAAU,gCAAzC,2BACA,wBAAQoE,QAASkI,GAAiBtM,UAAU,gCAA5C,0BACA,wBAAQoE,QAAS8F,GAAYlK,UAAU,6BAAvC,6BA7ER,eAACqE,EAAA,EAAD,CAAOC,KAAM0D,EAAgBzD,OAAQgI,GAAiB/H,WAAW,EAAOC,SAAS,SAASC,UAAU,EAApG,UACI,cAACL,EAAA,EAAMM,KAAP,UACI,cAACC,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,wBACA,cAACF,EAAA,EAAKG,QAAN,CAAcC,GAAG,WAAW3B,MAAO6E,EAAcjD,SAAUuH,YAKvE,eAACnI,EAAA,EAAMa,OAAP,WACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYhB,QAASmI,GAArC,mBAGA,cAACpH,EAAA,EAAD,CAAQC,QAAQ,UAAUhB,QAASqI,GAAnC,qCA1MV,sBAAKzM,UAAU,aAAf,UACE,oBAAIA,UAAU,qBAAd,mDACGiK,GACD,wBAAQjK,UAAU,oCAAoCoE,QAASwF,GAA/D,kCAzDF,eAACvF,EAAA,EAAD,CAAOC,KAAMgE,EAAmB/D,OAAQsF,GAAerF,WAAW,EAAOC,SAAS,SAASC,UAAU,EAArG,UACI,cAACL,EAAA,EAAMM,KAAP,UACI,cAACC,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,8DACA,cAACF,EAAA,EAAKG,QAAN,CAAcC,GAAG,WAAW3B,MAAO6E,EAAcjD,SAAU6E,YAKvE,cAACzF,EAAA,EAAMa,OAAP,UACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUhB,QAAS2F,GAAnC,4BAiLR,eAAC1F,EAAA,EAAD,CAAOC,KAAMkE,EAAmBjE,OAAQ0H,GAAezH,WAAW,EAAOC,SAAS,SAASC,UAAU,EAArG,UACI,cAACL,EAAA,EAAMM,KAAP,UACI,cAACC,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,oEACA,cAACF,EAAA,EAAKG,QAAN,CAAcC,GAAG,WAAW3B,MAAOqF,EAAiBzD,SAAUiH,YAK1E,cAAC7H,EAAA,EAAMa,OAAP,UACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUhB,QAAS+H,GAAnC,qCC9TDY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBzL,MAAK,YAAkD,IAA/C0L,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASvG,OACP,cAAC,IAAMwG,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.4faafa28.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './IndexCard.css'\n\nconst IndexCard = ({card, showCard}) => {\n\n    const popOutCard = () => {\n        showCard(card);\n    };\n\n    return (\n        <div onDoubleClick={popOutCard} className=\"card\">\n            <div className=\"card-body\">\n                <p>{card.card_summary}</p>\n            </div>\n        </div>\n    )\n};\n\nIndexCard.propTypes = {\n    card: PropTypes.shape({\n        card_summary: PropTypes.string,\n        id: PropTypes.number,\n        location: PropTypes.number,\n        content_blocks: PropTypes.string,\n        story: PropTypes.number,\n        entity_key: PropTypes.string,\n    }),\n    showCard: PropTypes.func,\n};\n\nexport default IndexCard;","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nimport IndexCard from './IndexCard';\nimport './Corkboard.css';\n// import { CardBody } from 'reactstrap';\n\n\nconst Corkboard = ({currentStoryId, backToDesk, addSceneCallback}) => {\n    const [cards, setCards] = useState([]);\n    const [showNewCardModal, setShowNewCardModal] = useState(false);\n    const [showChangeCardModal, setShowChangeCardModal] = useState(false);\n    const [currentCard, setCurrentCard] = useState({\n        id: null,\n        card_summary: '',\n        location: null,\n        content_blocks: '',\n        story: null,\n        entity_key: '',\n    });\n\n    // gets and remembers the scene cards associated with the current story\n    useEffect(() => {\n        getScenes();\n    }, []);\n    \n    const getScenes = () => {\n        axios\n            .get(`api/scenes/?story=${currentStoryId}`)\n            .then(response => {\n                setCards(response.data);\n            })\n            .catch(error => console.log(error.response.data));\n    }\n    \n\n    const popOutCard = (card) => {\n        console.log('popoutcard')\n        const selectedCard = {\n            id: card.id,\n            card_summary: card.card_summary,\n            location: card.location,\n            content_blocks: card.content_blocks,\n            story: card.story,\n            entity_key: card.entity_key,\n        }\n        setCurrentCard(selectedCard);\n        setShowChangeCardModal(true);\n    }\n    \n    const closeModal = () => {\n        setShowNewCardModal(false);\n        setShowChangeCardModal(false);\n        setCurrentCard({\n            id: null,\n            card_summary: '',\n            location: null,\n            content_blocks: [],\n            story: null,\n            entity_key: '',\n        })\n    }\n\n    const cardComponents = cards.map((card, i) => {\n        card.story = parseInt(card.story)\n        return (\n            <IndexCard \n                key={card.id} \n                showCard={popOutCard} \n                card={card}/>\n        )\n    });\n\n    const openNewCard = () => {\n        setShowNewCardModal(true);\n    }\n\n    // modal opens - user types in their summary - current event listener should handle that fine\n    // event listener just full on updates the entire card in state, does not just set summary in a separate state! cool\n    // do we need anything else before we dive into posting the card? don't think so\n    \n    const saveNewCard = () => {\n        const sceneBreakId = Math.random().toString(36).substring(2,10);\n\n        const newCard = {\n            card_summary: currentCard.card_summary,\n            location: cards.length,\n            story: currentStoryId,\n            entity_key: sceneBreakId\n        }\n\n        axios\n            .post(\"/api/scenes/\", newCard)\n            .then(response => console.log(response.data))\n            .catch(error => console.log(error.response))\n\n        const expandedCards = [...cards];\n        expandedCards.push(newCard);\n        setCards(expandedCards);\n\n        closeModal();\n        addSceneCallback(newCard);\n    };\n\n    // TODO refactor to send update to backend\n    const changeCardSummary = (event) => {\n        const updatedCard = {\n            id: currentCard.id,\n            card_summary: event.target.value,\n            location: currentCard.location,\n            content_blocks: currentCard.content_blocks,\n            story: currentStoryId,\n            entity_key: currentCard.entity_key,\n        };\n\n        setCurrentCard(updatedCard);\n    };\n\n    // TODO - refactor to send changes to back end\n    const saveCardChanges = () => {\n        axios\n            .put(`api/scenes/${currentCard.id}/`, currentCard)\n            .then(response => console.log(response.data))\n            .catch(error => console.log(error.response.data))\n\n        const updatedCards = [];\n        cards.forEach((card) => {\n            if (card.id === currentCard.id) {\n                updatedCards.push(currentCard);\n            } else {\n                updatedCards.push(card);\n            }\n        });\n        setCards(updatedCards);\n        closeModal();\n    };\n\n    const deleteCard = () => {\n        let mod = 0;\n        const trimmedCards = [];\n\n        cards.forEach((card, index) => {\n            // keeps all cards except deleted one, but updates their locations\n            // locally in state and in the database with a put request\n            if (card.id !== currentCard.id) {\n                const updated = {...card}\n                updated.location = index - mod\n                trimmedCards.push(updated)\n\n                axios\n                .put(`api/scenes/${updated.id}/`, updated)\n                .then(response => console.log(response.data))\n                .catch(error => console.log(error.response.data))\n            } else {\n                // deletes the card we want deleted and tracks whether we've gotten to that card yet in our order\n                mod++;\n                axios\n                    .put(`api/scenes/${currentCard.id}/`, {...card, location: null})\n                    .then(response => console.log(response.data))\n                    .catch(error => console.log(error.response.data))\n            }\n        })\n        // saves the reordered scenes with the correctly updated locations in state\n        setCards(trimmedCards);\n        closeModal();\n    }\n\n    const moveCard = (mod) => {\n        // prevents card from being moved outside the range of existing scenes\n        if ((currentCard.location + mod >= cards.length) || (currentCard.location + mod < 0)) {\n            closeModal();\n            return;\n        }\n        \n        // saves in case user has made summary changes they haven't saved\n        saveCardChanges();\n        \n        // makes a new array of all scene objects\n        // removes the active scene from the array\n        // adds teh active scene back in moved one place forward or backward\n        const shuffleCards = [...cards];\n        shuffleCards.splice(currentCard.location, 1)\n        shuffleCards.splice(currentCard.location + mod, 0, currentCard)\n\n        // iterates through the scenes, reassinging each card's location value\n        // to its current index in the reordered array\n        const updateLocations = shuffleCards.map((card, index) => {\n            const updateCard = {...card};\n            updateCard.location = index;\n\n            axios\n                .put(`api/scenes/${updateCard.id}/`, updateCard)\n                .then(response => console.log(response.data))\n                .catch(error => console.log(error.response.data))\n\n            return updateCard;\n        });\n        // saves the reordered scenes with the correctly updated locations in state\n        setCards(updateLocations);\n\n        // updates the currentCard object in state to have the correct location\n        setCurrentCard({\n            id: currentCard.id,\n            card_summary: currentCard.card_summary,\n            location: currentCard.location + 1,\n            content_blocks: currentCard.content_blocks,\n            story: currentCard.story,\n            entity_key: currentCard.entity_key,\n        });\n    }\n\n\n    const newCardModal = () => {\n        return (\n            <Modal \n                show={showNewCardModal}\n                onHide={closeModal}\n                animation={false}\n                backdrop='static'\n                centered={true}\n            >    \n                <Modal.Body>\n                    <Form>\n                        <Form.Group>\n                            <Form.Label>What's a quick summary of what happens in this scene?</Form.Label>\n                            <Form.Control\n                                as='textarea'\n                                value={currentCard.card_summary}\n                                onChange={changeCardSummary}\n                            />\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n            \n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={closeModal}>Close</Button>\n                    <Button variant=\"primary\" onClick={saveNewCard}>Save New Scene</Button>\n                </Modal.Footer>\n            </Modal>\n        )\n    }\n\n\n    const changeCardModal = () => {\n        return (\n            <Modal \n                show={showChangeCardModal}\n                onHide={closeModal}\n                animation={false}\n                backdrop='static'\n                centered={true}\n            >    \n                <Modal.Body>\n                    <Form>\n                        <Form.Group>\n                            <Form.Label>Scene Summary</Form.Label>\n                            <Form.Control\n                                as='textarea'\n                                value={currentCard.card_summary}\n                                onChange={changeCardSummary}\n                            />\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n            \n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={closeModal}>Close</Button>\n                    <Button variant=\"primary\" onClick={saveCardChanges}>Save Changes</Button> \n                    {currentCard.location === 0 ? null : <Button variant=\"info\" onClick={() => moveCard(-1)}>Move Scene Earlier</Button>}\n                    {currentCard.location === cards.length - 1 ? null : <Button variant=\"info\" onClick={() => moveCard(1)}>Move Scene Later</Button>}\n                    <Button variant=\"danger\" onClick={deleteCard}>Delete Scene</Button>\n                </Modal.Footer>\n            </Modal>\n        )\n    }\n\n    return (\n        <div className=\"corkboard__wall\">\n            {/* <button className=\"btn btn-block story-list__title-change\" onClick={backToDesk}>Go To Writing Desk</button> */}\n\n            <div className=\"corkboard__frame rounded p-5 d-flex justify-content-center align-items-center\">\n                <div className=\"corkboard__board d-flex flex-wrap justify-content-center p-2\">{cardComponents}</div>\n            </div>\n\n            <div className=\"corkboard__button-bar d-flex justify-content-center\">\n                <button onClick={openNewCard} className=\"btn btn-medium btn-primary\">Add New Card</button>\n            </div>\n\n            {changeCardModal()}\n            {newCardModal()}\n        </div>\n    )\n};\n\nexport default Corkboard;","import React from 'react';\nimport { GoogleLogin } from 'react-google-login'\nimport axios from 'axios';\n\nconst clientId = process.env.REACT_APP_GOOGLE_CLIENT_ID;\n\nconst Login = ({setUser}) => {\n    const onSuccess = (response) => {\n        console.log('[Login Success] currentUser:', response.profileObj);\n        const userData = {\n            id_token: response.getAuthResponse().id_token,\n            email: response.profileObj.email,\n            first_name: response.profileObj.givenName,\n            last_name: response.profileObj.familyName\n        }\n        axios\n            .post(\"api/users/\", userData)\n            .then((response) => {\n                setUser(response.data);\n            })\n            .catch((error) => console.log(error.response))\n\n        refreshTokenSetup(response);\n    };\n\n    const onFailure = (response) => {\n        console.log('[Login Failed] response: ', response);\n    };\n\n    const refreshTokenSetup = (response) => {\n        let refreshTiming = (response.tokenObj.expires_in || 3600 - 5 * 60) * 1000;\n\n        const refreshToken = async () => {\n            const newAuthResponse = await response.reloadAuthResponse();\n            refreshTiming = (newAuthResponse.expires_in || 3600 - 5 * 60) * 1000;\n            console.log(\"newAuthResponse:\", newAuthResponse);\n            console.log(\"new auth token\", newAuthResponse.id_token);\n            setTimeout(refreshToken, refreshTiming);\n        };\n\n        setTimeout(refreshToken, refreshTiming);\n    }\n\n\n    return (\n        <div>\n            <GoogleLogin\n                clientId={clientId}\n                buttonText=\"Login\"\n                onSuccess={onSuccess}\n                onFailure={onFailure}\n                cookiePolicy={'single_host_origin'}\n                isSignedIn={true}\n                render={renderProps => (\n                    <button onClick={renderProps.onClick} disabled={renderProps.disabled} className=\"btn btn-block\">Login with Google</button>\n                )}\n            />\n        </div>\n    );\n}\n\nexport default Login;","import React from 'react';\nimport { GoogleLogout } from 'react-google-login';\n\nconst clientId = process.env.REACT_APP_GOOGLE_CLIENT_ID;\n\nconst Logout = ({setUser}) => {\n    const onSuccess = () => {\n        alert('you have logged out');\n        setUser({\n            id: null,\n            email: '',\n            first_name: '',\n            last_name: '',\n        });\n    };\n\n    return (\n        <div>\n            <GoogleLogout \n                clientId={clientId}\n                buttonText=\"Logout\"\n                onLogoutSuccess={onSuccess}\n                render={renderProps => (\n                    <button onClick={renderProps.onClick} disabled={renderProps.disabled} className=\"btn btn-block\">Log Out</button>\n                )}\n                className=\"btn btn-secondary google-log-btn\"\n            />\n        </div>\n    )\n}\n\nexport default Logout;","import React, {useState, useEffect, forceRefresh } from 'react';\nimport {Editor, EditorState, convertToRaw, convertFromRaw, Modifier, moveSelectionToEnd} from 'draft-js';\n// import {BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom';\nimport axios from 'axios';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nimport Corkboard from './components/Corkboard';\nimport Login from './components/Login';\nimport Logout from './components/Logout';\nimport './App.css';\n\n\nfunction App() {\n  const [editorState, setEditorState] = useState(\n    () => EditorState.createEmpty(),\n  );\n  const [allStories, setAllStories] = useState([]);\n  const [currentStoryId, setCurrentStoryId] = useState(null);\n  const [currentStoryTitle, setCurrentStoryTitle] = useState('');\n  const [showTitleModal, setShowTitleModal] = useState(false);\n  const [amendedTitle, setAmendedTitle] = useState('');\n  const [inBoardView, setInBoardView] = useState(false);\n  // TODO do I need two separate title setting modals?\n  const [showNewTitleModal, setShowNewTitleModal] = useState(false);\n  const [showNewSceneModal, setShowNewSceneModal] = useState(false);\n  const [newSceneSummary, setNewSceneSummary] = useState('');\n  const [user, setUser] = useState({\n    id: null,\n    email: '',\n    first_name: '',\n    last_name: '',\n  });\n\n\n  // app gets and remembers all stories\n  // useEffect(() => {\n  //   getStories();\n  // }, []);\n\n  useEffect(() => {\n    getStories();\n  }, [user]);\n\n  const getStories = () => {\n    if (user.id) {\n      axios\n        .get(`/api/stories/?user=${user.id}`)\n        .then(response => {\n          setAllStories(response.data);\n        })\n        .catch(error => console.log(error.response));\n    }\n  }\n\n\n  // app gets user login through google\n  const userCallbackLogIn = (user) => {\n    setUser(user);\n    getStories();\n  }\n\n  const userCallbackLogOut = (user) => {\n    setUser(user);\n    setCurrentStoryId(null);\n    setCurrentStoryTitle('');\n    setInBoardView(false);\n    setAllStories([]);\n  }\n\n  // app gets and remembers user's choice for current story\n  // and sets it up in the editor state\n  const selectStory = (event) => {\n    setCurrentStoryId(event.target.id);\n    setCurrentStoryTitle(event.target.title);\n    getCurrentStory(event.target.id);\n  };\n\n  const getCurrentStory = (story) => {\n    axios\n    .get(`/api/stories/${story}`)\n    .then(response => {\n      loadWork(response.data.draft_raw)\n    })\n    .catch(error => {\n      console.log(error.response);\n      setCurrentStoryId(null);\n      setCurrentStoryTitle(null);\n    })\n  }\n\n  const loadWork = (rawJson) => {\n    const destringed = JSON.parse(rawJson);\n    const newContentState = convertFromRaw(destringed);\n    const newEditor = EditorState.createWithContent(newContentState);\n    setEditorState(newEditor);\n  }\n\n\n  // app lets user pick a different story or start a new story\n  const unselectStory = () => {\n    setCurrentStoryId(null);\n    setCurrentStoryTitle('');\n    getStories();\n  }\n\n  const changeStory = () => {\n    return (\n      <div>\n        <button className=\"btn btn-block story-list__title-change\" onClick={unselectStory}>Choose A Different Story</button>\n      </div>\n    )\n  }\n\n   // TODO can I streamline this so there's just one modal for changing/making new title?\n   // ALSO TODO: updating the title saves it in the DB but doesn't trigger rerender so change doesn't show\n  const openNewTitle = () => {\n    setShowNewTitleModal(true);\n  }\n\n  const closeNewTitle = () => {\n    setShowNewTitleModal(false);\n  }\n\n  const newTitleInProgress = (event) => {\n    setAmendedTitle(event.target.value);\n  }\n\n  const newTitleModal = () => {\n    return (\n        <Modal show={showNewTitleModal} onHide={closeNewTitle} animation={false} backdrop='static' centered={true} >    \n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label>What do you want the title of your story to be?</Form.Label>\n                        <Form.Control as='textarea' value={amendedTitle} onChange={newTitleInProgress} />\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n        \n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={createNew}>\n                    Set Title\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n  }\n\n  // TODO update this to have the proper draft_raw content\n  // ...if any draft_raw, for that matter\n  // use editorstate get current content - raww - stingify?\n  // ALSO TODO have the new work spawn one scene immediately to start with\n  const createNew = () => {\n    if (amendedTitle === '') {\n      closeNewTitle();\n      return\n    }\n\n    axios\n      .post('/api/stories/', {title: amendedTitle, draft_raw: \"{\\\"blocks\\\":[],\\\"entityMap\\\":{}}\", user: user.id})\n      .then(response => {\n        setCurrentStoryId(response.data.id)\n        setCurrentStoryTitle(response.data.title)\n        const expandedStories = [...allStories]\n        expandedStories.push(response.data);\n        setAllStories(expandedStories);\n      })\n      .catch(error => console.log(error));\n\n    closeNewTitle();\n    setAmendedTitle('');\n  }\n\n\n  // app creates story links and shows them to user for user to pick\n  const generateTitles = allStories.map((story, i) => {\n    return <button className=\"btn story-list__title\" key={i} id={story.id} onClick={selectStory} title={story.title}>\n        {story.title}\n    </button>\n  });\n\n  const noStorySelectedView = () => {\n    return (\n      <div className=\"story-list\">\n        <h3 className=\"story-list__header\">What would you like to work on today?</h3>\n          {generateTitles}\n          <button className=\"btn story-list__title btn-primary\" onClick={openNewTitle}>Start A New Story</button>\n      </div>\n    )\n  }\n\n\n  const deleteWork = () => {\n    const trimmedStories = allStories.map((story) => {\n      if (story.id !== currentStoryId) {\n        return story;\n      }\n    })\n    setAllStories(trimmedStories)\n\n    axios\n      .delete(`/api/stories/${currentStoryId}/`)\n      .then(response => console.log(response.data))\n      .catch(error => console.log(error))\n\n    unselectStory();\n  }\n\n  // app updates state and database according to the user's work\n  const onEditorChange = (editorState) => {\n    setEditorState(editorState);\n    // const raw = convertToRaw(editorState.getCurrentContent())\n    // console.log(raw);\n  };\n\n  const saveWork = (title, es) => {\n    const contentState = es.getCurrentContent();\n    const raw = convertToRaw(contentState);\n    const updatedWork = {\n        title: title,\n        draft_raw: JSON.stringify(raw),\n        user: user.id,\n    }\n\n    console.log('savework')\n    axios\n        .put(`/api/stories/${currentStoryId}/`, updatedWork)\n        .then(response => console.log(response.data))\n        .catch(error => console.log(error.response));\n  };\n\n  const saveExistingWork = () => {\n    saveWork(currentStoryTitle, editorState)\n  }\n\n\n  // writer can create new scenes from either view\n  const addSceneBlocks = (newScene) => {\n    console.log('addscenebreaks')\n    // create new content block for scene break, unless first line in story\n    let currentContent = editorState.getCurrentContent();\n    let editorToUse = editorState;\n    let selection = editorToUse.getSelection();\n\n    if (convertToRaw(currentContent)['blocks'].length > 1) {\n      editorToUse = splitLine();\n      currentContent = editorToUse.getCurrentContent();\n      selection = editorToUse.getSelection();\n    }\n    \n    // create the entity with the scene break id\n    const sceneBreakId = newScene.entity_key;\n    currentContent.createEntity('SCENE', 'IMMUTABLE', sceneBreakId);\n    const entityKey = currentContent.getLastCreatedEntityKey();\n    \n    // create the content block the entity will be associated with\n    const textToUse = '***'\n    const textWithEntity = Modifier.insertText(currentContent, selection, textToUse, null, entityKey);\n    const updatedEditorState = EditorState.push(editorToUse, textWithEntity, 'insert-characters')\n    setEditorState(updatedEditorState);\n    \n    // create new content block for user's next input\n    const editorWithSceneBlocks = splitLine(updatedEditorState);\n    return editorWithSceneBlocks;\n    // saveExistingWork();\n  };\n\n  const splitLine = (es=editorState) => {\n    // function makes sure that the new scene break is made on its own separate content block\n    // not attached to a preexisting content block, not attached to the next thing the user writes\n    const currentContent = es.getCurrentContent();\n    const selection = es.getSelection();\n    const newLine = Modifier.splitBlock(currentContent, selection)\n    const editorWithBreak = EditorState.push(es, newLine, \"split-block\")\n    setEditorState(editorWithBreak)\n    return editorWithBreak\n  }\n\n  \n  const openNewScene = () => {\n    setNewSceneSummary('');\n    setShowNewSceneModal(true);\n  }\n\n  const closeNewScene = () => {\n    setShowNewSceneModal(false);\n  }\n\n  const newSceneInProgress = (event) => {\n    setNewSceneSummary(event.target.value);\n  }\n\n  const saveNewScene = () => {\n    const sceneBreakId = Math.random().toString(36).substring(2,10)\n\n    const newScene = {\n      card_summary: newSceneSummary,\n      story: currentStoryId,\n      entity_key: sceneBreakId\n    }\n\n    axios\n      .post(\"/api/scenes/\", newScene)\n      .then(response => console.log(response.data))\n      .catch(error => console.log(error.response))\n      \n    closeNewScene();\n    chainSaveFunction(newScene);\n  }\n\n  const chainSaveFunction = async newScene => {\n    const editorWithSceneBlocks = await addSceneBlocks(newScene);\n    const savedWork = await saveWork(currentStoryTitle, editorWithSceneBlocks);\n  }\n  \n  const newSceneModal = () => {\n    return (\n        <Modal show={showNewSceneModal} onHide={closeNewScene} animation={false} backdrop='static' centered={true} >    \n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label>What's a quick summary of what happens in this scene?</Form.Label>\n                        <Form.Control as='textarea' value={newSceneSummary} onChange={newSceneInProgress} />\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n        \n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={saveNewScene}>\n                    Make New Scene\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n  }\n\n\n  // app lets user change story title\n  const openTitleChange = () => {\n    setShowTitleModal(true);\n  }\n\n  const closeTitleModal = () => {\n    setShowTitleModal(false);\n    setAmendedTitle('');\n  }\n\n  const titleChangeInProgress = (event) => {\n    setAmendedTitle(event.target.value);\n  }\n\n  // this makes it so new title shows up as desired on the button at top\n  // but old title still shows in list of all works until refresh\n  const saveTitleChange = () => {\n    saveWork(amendedTitle, editorState);\n    setCurrentStoryTitle(amendedTitle);\n    const storiesPlusUpdate = allStories.map((story) => {\n      if (story.id == currentStoryId) {\n        const updatedStory = {...story}\n        story.title = amendedTitle;\n        return updatedStory;\n      } else {\n        return story\n      }\n    })\n    setAllStories(storiesPlusUpdate);\n    closeTitleModal();\n  }\n\n  const changeTitleModal = () => {\n    return (\n        <Modal show={showTitleModal} onHide={closeTitleModal} animation={false} backdrop='static' centered={true} >    \n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label>New Title</Form.Label>\n                        <Form.Control as='textarea' value={amendedTitle} onChange={titleChangeInProgress} />\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n        \n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={closeTitleModal}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={saveTitleChange}>\n                    Save New Title\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n  }\n\n\n  // lets user switch between views\n  const goToStoryBoard = () => {\n    // set cursor to end (selection to end/focus to end/w/e? so that scenes inserted in card view go to end)\n    saveExistingWork()\n    setInBoardView(true);\n  }\n\n  const goToWritingDesk = () => {\n    getCurrentStory(currentStoryId);\n    setInBoardView(false);\n  }\n\n  const switchViewButton = () => {\n    if (inBoardView) {\n      return (\n        <button className=\"btn btn-block\" onClick={goToWritingDesk}>Go To Writing Desk</button>\n      )\n    } else {\n      return (\n        <button className=\"btn btn-block\" onClick={goToStoryBoard}>Go To Story Board</button>\n      )\n    }\n  }\n\n\n  // app displays the story the user wants to work on\n  // either as a writing desk\n  // or by rendering the corkboard component\n  const storyInProgressView = () => {\n      if (inBoardView) {\n        return (\n          <Corkboard currentStoryId={currentStoryId} backToDesk={goToWritingDesk} addSceneCallback={chainSaveFunction} />\n        )\n      } else {\n        return (\n          <div className=\"writing-desk__desk\">\n            \n            \n            \n            <div className=\"writing-desk__editor container border border-dark rounded w-85 h-85\">\n              <Editor\n                editorState={editorState}\n                onChange={onEditorChange}\n                spellCheck={true}\n              />\n            </div>\n\n            {/* <button className=\"btn btn-block writing-desk__board-button\" onClick={goToStoryBoard}>Go To Story Board</button> */}\n    \n            <div className=\"writing-desk__button-bar d-flex flex-row justify-content-center\">\n                <button onClick={saveExistingWork} className=\"btn btn-primary rounded m-1\">Save</button>\n                {/* <button className=\"btn btn-block\" onClick={goToStoryBoard}>Go To Story Board</button> */}\n                <button onClick={openNewScene} className=\"btn btn-secondary rounded m-1\">Add New Scene</button>\n                <button onClick={openTitleChange} className=\"btn btn-secondary rounded m-1\">Change Title</button>\n                <button onClick={deleteWork} className=\"btn btn-danger rounded m-1\">Delete Story</button>\n            </div>\n    \n            {changeTitleModal()}\n            </div>\n        )\n      }\n  }\n\n  return (\n    <div>\n      {currentStoryId ? <h4 className=\"current-title-btn\">{currentStoryTitle}</h4> : null }\n      <div className=\"d-flex justify-content-end main-options-nav\">\n        {/* {currentStoryId ? <button className=\"btn btn-block\" onClick={goToStoryBoard}>Go To Story Board</button> : null } */}\n        { currentStoryId ? switchViewButton() : null }\n        {currentStoryId ? changeStory() : null }\n        {user.email ? <Logout setUser={userCallbackLogOut} /> : <Login setUser={userCallbackLogIn} />}\n      </div>\n\n      {currentStoryId ? storyInProgressView() : noStorySelectedView()}\n      {newTitleModal()}\n      {newSceneModal()}\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}